package gov.cancer.pageobject.section;

import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.WebElement;

import gov.cancer.framework.ElementHelper;
import gov.cancer.pageobject.helper.Link;
import gov.cancer.pageobject.image.Image;

/**
 * Represents a single feature card
 */
public class FeatureCard {

  static final String TITLE_SELECTOR = ":scope h3";
  static final String IMAGE_SELECTOR = ":scope img";
  static final String DESCR_SELECTOR = ":scope p";
  static final String LINK_SELECTOR = ":scope a";
  static final String CHILDREN_SELECTOR = ":scope a>*";
  static final String IMAGE_CHILDREN_SELECTOR = ":scope .image-hover>*";
  static final String EXTLINK_SELECTOR = ":scope .icon-exit-notification";

   // WebElement containing the entire feature card.
  private WebElement card;

  // The image appearing on the feature card.
  private Image image;

  // Card title
  private WebElement title;

  // Card description (May be null).
 private WebElement description;

  // The link the card goes to.
private  WebElement exitNotificationLink;

  // The list of Links representing link the card goes to and exit notification link.
  private List<Link> allLinks = new ArrayList<>();

  /**
   * Constructor
   *
   * @param element
   *          WebElement containing the feature card's markup.
   */
  public FeatureCard(WebElement element) {
    this.card = element;

    title = ElementHelper.findElement(card, TITLE_SELECTOR);
    List <WebElement> linksElements = ElementHelper.findElements(card, LINK_SELECTOR);
    for (WebElement we : linksElements){
      this.allLinks.add(new Link(we));
    }
    // childrenOfLinkTag finds all the children of 'a' element of a feature card
    //used to eliminate implicit wait for cards that does not have description
    List<WebElement> childrenOfLinkTag= ElementHelper.findElements(card, CHILDREN_SELECTOR);
    if (childrenOfLinkTag.size()>2)
    description = ElementHelper.findElement(card, DESCR_SELECTOR);

    WebElement im = ElementHelper.findElement(card, IMAGE_SELECTOR);
    image = new Image(im);
    // childrenOfImage finds all the children of 'div.image hover' element of a feature card
    //used to eliminate implicit wait for cards that does not have exitNotificationLink
    List<WebElement> childrenOfImage = ElementHelper.findElements(card, IMAGE_CHILDREN_SELECTOR);
    if (childrenOfImage.size()>1)
    exitNotificationLink = ElementHelper.findElement(card, EXTLINK_SELECTOR);

  }

  /**
   * Retrieve the card's promotional image or override.
   *
   * @return An Image object containing the card's promotional image.
   */
  public Image getImage() {
    return this.image;
  }

  /**
   * Retrieve the card's title text.
   *
   * @return String containing the title text.
   */
  public String getTitleText() {
    return this.title.getText();
  }

  /**
   * Retrieve the card's description.
   *
   * @return String containing the description if present, null otherwise.
   */
  public String getDescriptionText() {
    try {
      return description.getText();
    }catch (NullPointerException e){
      return null;
    }
  }

    /**
   * Retrieve the card's promotional image path without autogenerated token.
   * That will allow us to evaluate a "clean" path that will contain file path and file name only
   *
   * @return An Image path of the card's promotional image.
   */
  public String getImagePath() {
    String fullPath =  image.getImageURI().getPath();
    String token = image.getToken();
    return fullPath.replace(token, "");
  }



  /**
   * Retrieve the link the card goes to.
   *
   * @return A Link instance representing the link.
   * Used get(0) to get the first link of feature card which is the main link to the content, By requirement this always have to be the first link on feature card.
   */
  public Link getLink() {
    return allLinks.get(0);
  }

  /**
   * Check if external link is present or not
   *
   * @return true if external link is present else return false
   */
  public boolean isExternalLinkPresent() {
    if (exitNotificationLink != null) {
      return true;
    }
    return false;
  }

  /**
   * Retrieve the link the exit Notification goes to.
   *
   * @return String containing the link for exit disclaimer policy.
   */
  public Link getExternalLinkNotification() {
    Link link = new Link(exitNotificationLink);
    return link;

  }

}
